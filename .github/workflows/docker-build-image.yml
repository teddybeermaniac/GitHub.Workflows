# Builds a Dockerfile and pushes the image to ghcr.io.
name: 'Docker build image'
permissions:
  contents: read
  packages: write

on:
  workflow_call:
    inputs:
      context:
        description: 'Path to Docker context (default: .)'
        type: string
        required: false
        default: .

      file:
        description: 'Path to Dockerfile (default: {context}/Dockerfile)'
        type: string
        required: false

      platforms:
        description: 'Platforms to build image for (default: amd64,arm64)'
        type: string
        required: false
        default: amd64,arm64

      authors:
        description: 'Author contact information'
        type: string
        required: true

      image_name:
        description: 'Image name (default: lowercase repository name)'
        type: string
        required: false

    outputs:
      image:
        value: '${{ jobs.build.outputs.image }}'

jobs:
  build:
    name: 'Build ${{ inputs.file || format(''{0}/Dockerfile'', inputs.context) }} with ${{ inputs.context }}'
    runs-on: ubuntu-latest
    outputs:
      image: '${{ fromJSON(steps.metadata.outputs.json).tags[0] }}'

    steps:
      - name: 'Set IMAGE_URL variable'
        run: |
          if [[ -z "${INPUT_IMAGE_NAME}" ]]; then
            IMAGE_NAME="${GITHUB_REPOSITORY#*/}"
          else
            IMAGE_NAME="${INPUT_IMAGE_NAME}"
          fi
          IMAGE_URL="ghcr.io/${GITHUB_REPOSITORY_OWNER}/${IMAGE_NAME}"

          printf 'IMAGE_URL=%s\n' "${IMAGE_URL}" >> "${GITHUB_ENV}"
        env:
          INPUT_IMAGE_NAME: '${{ inputs.image_name }}'

      - name: 'Populate metadata'
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: '${{ env.IMAGE_URL }}'
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.authors=${{ inputs.authors }}
            org.opencontainers.image.documentation=${{ github.server_url }}/${{ github.repository }}
          tags: |
            type=semver,pattern={{ major }}.{{ minor }}.{{ patch }},prefix=v,priority=9999
            type=semver,pattern={{ major }}.{{ minor }},prefix=v,priority=9998
            type=semver,pattern={{ major }},prefix=v,priority=9997
            type=sha,prefix=,priority=9996
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') || github.ref_type == 'tag' }},priority=9995
            type=raw,value=edge,enable=${{ github.ref == format('refs/heads/{0}', 'develop') }},priority=9994

      - name: 'Set IMAGE_NAME and IMAGE_DESCRIPTION_ESCAPED variables'
        run: |
          IMAGE_NAME="${IMAGE_TAG/:*/}"
          IMAGE_DESCRIPTION_ESCAPED="$(echo "${IMAGE_DESCRIPTION}" | tr -d '",'"'")"

          printf 'IMAGE_NAME=%s\nIMAGE_DESCRIPTION_ESCAPED=%s\n' \
            "${IMAGE_NAME}" "${IMAGE_DESCRIPTION_ESCAPED}" >> "${GITHUB_ENV}"
        env:
          IMAGE_TAG: '${{ fromJSON(steps.metadata.outputs.json).tags[0] }}'
          IMAGE_DESCRIPTION: '${{ fromJSON(steps.metadata.outputs.json).labels[''org.opencontainers.image.description''] }}'

      - name: 'Checkout ${{ inputs.repository }} repository'
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: 'Login to ghcr.io'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: '${{ github.actor }}'
          password: '${{ github.token }}'

      - name: 'Setup Buildx'
        uses: docker/setup-buildx-action@v2
        with:
          platforms: '${{ inputs.platforms }}'

      - name: 'Setup ${{ inputs.platforms }} QEMU'
        if: '${{ inputs.platforms != ''amd64'' }}'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: '${{ inputs.platforms }}'

      - name: 'Build${{ github.event_name != ''pull_request'' && '' and push'' || '''' }}'
        uses: docker/build-push-action@v4
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: '${{ inputs.context }}'
          file: '${{ inputs.file }}'
          labels: '${{ steps.metadata.outputs.labels }}'
          outputs: 'type=image,name=target,annotation-index.org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION_ESCAPED }},push=${{ github.event_name != ''pull_request'' }}'
          platforms: '${{ inputs.platforms }}'
          tags: '${{ steps.metadata.outputs.tags }}'
